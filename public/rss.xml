<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Daily Notes]]></title><description><![CDATA[Just Some Notes]]></description><link>https://zhouzh1.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sat, 21 Mar 2020 07:18:26 GMT</lastBuildDate><atom:link href="https://zhouzh1.github.io/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 21 Mar 2020 07:18:26 GMT</pubDate><webMaster><![CDATA[zhouzh1]]></webMaster><item><title><![CDATA[实现函数节流]]></title><description><![CDATA[<pre><code class="lang-js">/**
 * 函数节流
 * @param {function} func 需要节流的函数
 * @param {number} interval 函数的执行间隔（毫秒）
 * @param {object} options { leading: true, tailing: false }
 */
function throttle(func, interval, options) {
    let canRun = false,    // 是否可以执行函数
        lastInvokeTime = 0,    // 函数上一次被执行的时刻（时间戳）
        tid = null;    // 定时器id，设置间隔过后再次执行一次函数
    // leading和tailing不能同时为false
    const { leading = true, tailing = false } = options || {};
    const throttled = function throttled(...args) {
        let now = Date.now();
        if (!lastInvokeTime) {
            if (leading) {
                canRun = true;
            }
        } else {
            if (now - lastInvokeTime &gt;= interval) {
                canRun = true;
            }
        }
        if (canRun) {
            if (tid) {
                clearTimeout(tid);
                tid = null;
            }
            canRun = false;
            lastInvokeTime = now;
            func.apply(this, args);
        } else if (!tid &amp;&amp; tailing) {
            tid = setTimeout(function () {
                func.apply(this, args);
                lastInvokeTime = 0;
                tid = null;
            }, now - lastInvokeTime);
        }
    }

    /**
     * 取消最后一次的函数执行
     */
    throttled.cancel = function cancel() {
        lastInvokeTime = 0;
        if (tid) {
            clearTimeout(tid);
            tid = null;
        }
    }

    return throttled;
}

// test
let count = 0;
function increment() {
    count += 1;
    console.log((new Date().getSeconds()), count);
}

const incrementThrottled = throttle(increment, 3000);

while (count &lt; 5) {
    incrementThrottled();
}
// test result
// 47 1
// 50 2
// 53 3
// 56 4
// 59 5

</code></pre>
]]></description><link>https://zhouzh1.github.io/article/implement-throttling-of-function-call.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/implement-throttling-of-function-call.html.html</guid><pubDate>Sat, 21 Mar 2020 07:15:00 GMT</pubDate></item><item><title><![CDATA[利用reduce方法实现map方法]]></title><description><![CDATA[<pre><code class="lang-js">/**
 * 利用reduce方法实现map方法
 * @param {function} callback map回调函数
 * @param {object} context callback执行时的this上下文对象
 */
Array.prototype.mapImplementedByReduce = function (callback, context = null) {
    const reducer = function (accumulator, currentValue, index, array) {
        const result = callback.call(context, currentValue, index, array);
        accumulator.push(result);
        return accumulator;
    }
    return this.reduce(reducer, []);
}

/**
 * test
 */
const arr = [1, 3, 5];
const callback = function (number, index, array) {
    return Math.pow(number, 3);
}

console.log(arr.mapImplementedByReduce(callback)); // [ 1, 27, 125 ]
</code></pre>
]]></description><link>https://zhouzh1.github.io/article/use-reduce-to-implement-map.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/use-reduce-to-implement-map.html.html</guid><pubDate>Thu, 19 Mar 2020 14:12:00 GMT</pubDate></item><item><title><![CDATA[redux源代码阅读]]></title><description><![CDATA[<p>Redux是一个常用的组件状态管理库，通过将应用的状态数据集中存储并且限制可以更改状态数据的路径，使得开发者可以更好的追踪以及预测应用状态的变化过程，Redux的源代码不到1000行，是一个学习源代码分析的不错对象.</p>
<p>在浏览器中通过<code>script</code>标签加载<a href="https://unpkg.com/redux@4.0.4/dist/redux.js"></a>后，脚本会在全局作用域下添加<code>Redux</code>变量.<br><img src="/site_assets/E57038ED-4FB7-4eca-AE2D-56F675EFF327.png" alt="redux object screenshot"></p>
<p>对应的源代码如下</p>
<pre><code class="lang-js">/**
 * 先探测脚本所处的运行环境和加载机制，然后将redux的方法和属性挂载到对应的作用域
 * 1. Node.js环境下和AMD加载机制下挂载到模块的导出对象
 * 2. script标签加载挂载到window对象
 */
(function (global, factory) {
    // Node.js环境
    typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? factory(exports) :
        // 浏览器环境（通过AMD方式加载）
        typeof define === &#39;function&#39; &amp;&amp; define.amd ? define([&#39;exports&#39;], factory) :
            // 浏览器环境（通过script标签加载）
            (global = global || self, factory(global.Redux = {}));
}(this, function (exports) {

    /* other code... */

    exports.__DO_NOT_USE__ActionTypes = ActionTypes;
    exports.applyMiddleware = applyMiddleware;
    exports.bindActionCreators = bindActionCreators;
    exports.combineReducers = combineReducers;
    exports.compose = compose;
    exports.createStore = createStore;

    Object.defineProperty(exports, &#39;__esModule&#39;, { value: true });
}));
</code></pre>
<h3 id="__do_not_use__actiontypes">__DO_NOT_USE__ActionTypes</h3>
<pre><code class="lang-js">/**
 * 生成以小数点分割的随机数
 */
var randomString = function randomString() {
    return Math.random().toString(36).substring(7).split(&#39;&#39;).join(&#39;.&#39;);
};

/**
 * 这些action type是redux内部的保留关键字
 * 不可以在业务代码中使用这些action type
 */
var ActionTypes = {
    INIT: &quot;@@redux/INIT&quot; + randomString(),
    REPLACE: &quot;@@redux/REPLACE&quot; + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return &quot;@@redux/PROBE_UNKNOWN_ACTION&quot; + randomString();
    }
};
</code></pre>
<h3 id="compose">compose</h3>
<pre><code class="lang-js">/**
 * compose是一个工具函数，它接收一系列的函数作为数组，并且将这些函数形成一个调用栈，其中最右侧的函数位于栈顶，最左侧的函数位于栈底
 * 栈顶的函数可以接收任意个参数，并且将其返回值作为下一个函数的参数，以此类推，最终栈底的函数的返回值为最终的结果
 * @param {Array&lt;Function&gt;} functions 函数数组
 * @returns {Function}
 */
function compose(func1, func2, func3) {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key &lt; _len; _key++) {
        funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
        return function (arg) {
            return arg;
        };
    }

    if (funcs.length === 1) {
        return funcs[0];
    }

    return funcs.reduce(function (a, b) {
        return function () {
            return a(b.apply(void 0, arguments));
        };
    });
}
</code></pre>
<h3 id="createstore">createStore</h3>
<p><code>createStore</code>用于创建store，store就是redux用于存储应用状态数据的地方，其本质是一个对象，store拥有<code>getState</code>方法，用来获取应用状态数据，<code>dispatch</code>方法用来触发reducer的计算从而更新应用状态，<code>subscribe</code>方法用于订阅状态更新的处理函数，每次调用<code>dispatch</code>后redux都会执行这些函数.<br><img src="/site_assets/2CEE1E5D-E6F1-45f1-9292-FF87C5CEA046.png" alt="store screenshot"></p>
<pre><code class="lang-js">/**
 * 创建store
 * @param {Function} reducer reducer函数用于计算state，每一次调用store.dispatch，redux都会调用reducer函数并传入当前的state和对应的action，
 * reducer函数会根据action的type属性和payload计算最新的state，对于未匹配到的action类型，reducer函数应该返回默认的或者当前的state，
 * reducer函数不能返回一个undefined值，但是可以返回null，因为一个应用任何时刻都有一个确定的状态，不可能是未定义的
 * @param {String} preloadedState preloadedState是一个序列化的对象字符串，用于表示默认的state，如果应用使用了服务端渲染，那么在浏览器端创建store的时候，
 * 应该将在服务端计算出的state经过序列化后传给preloadState
 * @param {Function} enhancer enhancer是一个高阶函数，以createStore函数为参数，并返回增强的&#39;enhancedCreateStore&#39;函数，开发者可以用enhancer给createStore函数
 * 添加额外的处理逻辑
 * @returns {Object}
 */
function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    /**
     * 参数有效性检查
     * enhancer函数只能有一个
     */
    if (typeof preloadedState === &#39;function&#39; &amp;&amp; typeof enhancer === &#39;function&#39; || typeof enhancer === &#39;function&#39; &amp;&amp; typeof arguments[3] === &#39;function&#39;) {
        throw new Error(&#39;It looks like you are passing several store enhancers to &#39; + &#39;createStore(). This is not supported. Instead, compose them &#39; + &#39;together to a single function.&#39;);
    }

    // 参数容错处理
    if (typeof preloadedState === &#39;function&#39; &amp;&amp; typeof enhancer === &#39;undefined&#39;) {
        enhancer = preloadedState;
        preloadedState = undefined;
    }

    // enhancer必须得是一个函数
    if (typeof enhancer !== &#39;undefined&#39;) {
        if (typeof enhancer !== &#39;function&#39;) {
            throw new Error(&#39;Expected the enhancer to be a function.&#39;);
        }

        // 调用enhancer函数并用增强版的&#39;createStore&#39;函数创建store
        return enhancer(createStore)(reducer, preloadedState);
    }

    // reducer必须得是一个函数
    if (typeof reducer !== &#39;function&#39;) {
        throw new Error(&#39;Expected the reducer to be a function.&#39;);
    }

    // 存储当前的reducer函数
    var currentReducer = reducer;
    // 存储应用的当前state
    var currentState = preloadedState;
    // 存储目前存在的状态更新订阅函数
    var currentListeners = [];
    var nextListeners = currentListeners;
    // 表示应用state此刻是否正处于被更新中，防止两个更新操作同时进行
    var isDispatching = false;

    /**
     * 数组浅拷贝，使得对currentListeners数组的变更更安全
     */
    function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
            nextListeners = currentListeners.slice();
        }
    }

    /**
     * 回去应用的当前state
     * @returns {Object}
     */
    function getState() {
        if (isDispatching) {
            throw new Error(&#39;You may not call store.getState() while the reducer is executing. &#39; + &#39;The reducer has already received the state as an argument. &#39; + &#39;Pass it down from the top reducer instead of reading it from the store.&#39;);
        }

        return currentState;
    }

    /**
     * 订阅一个state发生更新的处理函数
     * @param {Function} listener 
     * @returns {Function} 执行此函数可以取消当前订阅
     */
    function subscribe(listener) {
        // 参数校验，listener必须是一个函数
        if (typeof listener !== &#39;function&#39;) {
            throw new Error(&#39;Expected the listener to be a function.&#39;);
        }

        // 不能在状态更新(reducer函数执行)的过程中订阅处理函数
        if (isDispatching) {
            throw new Error(&#39;You may not call store.subscribe() while the reducer is executing. &#39; + &#39;If you would like to be notified after the store has been updated, subscribe from a &#39; + &#39;component and invoke store.getState() in the callback to access the latest state. &#39; + &#39;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#39;);
        }

        // 函数订阅成功
        var isSubscribed = true;
        // 函数入队
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
            if (!isSubscribed) {
                return;
            }

            // 不能在状态更新(reducer函数执行)的过程中取消订阅
            if (isDispatching) {
                throw new Error(&#39;You may not unsubscribe from a store listener while the reducer is executing. &#39; + &#39;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#39;);
            }

            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
        };
    }

    /**
     * dispatch函数是redux中唯一可以更新state的途径，结合dispatch和reducer，开发者可以对应用状态进行记录、预测、重放等操作
     * @param {Object} action action必须有一个type属性，用于指示reducer如何计算最新的state
     */
    function dispatch(action) {
        // action是一个对象，但不能是数组、NULL等值
        if (!isPlainObject(action)) {
            throw new Error(&#39;Actions must be plain objects. &#39; + &#39;Use custom middleware for async actions.&#39;);
        }

        // action必须存在一个明确的type属性
        if (typeof action.type === &#39;undefined&#39;) {
            throw new Error(&#39;Actions may not have an undefined &quot;type&quot; property. &#39; + &#39;Have you misspelled a constant?&#39;);
        }

        // 不能同时存在两个state更新进程，否则哪个进程优先级更高呢？
        if (isDispatching) {
            throw new Error(&#39;Reducers may not dispatch actions.&#39;);
        }

        try {
            // 锁住，此次更新结束前后续所有的更新操作都丢弃
            isDispatching = true;
            // 调用reducer函数计算最新的state，reducer函数的参数为当前state和对应的action
            currentState = currentReducer(currentState, action);
        } finally {
            // 更新完毕，释放锁
            isDispatching = false;
        }

        // 更新完毕，按订阅顺序依次执行处理函数
        var listeners = currentListeners = nextListeners;

        for (var i = 0; i &lt; listeners.length; i++) {
            var listener = listeners[i];
            listener();
        }

        // 返回action，提供给redux中间件进行后续处理
        return action;
    }

    /**
     * 应用运行期间更换reducer函数
     * @param {Function} nextReducer
     */
    function replaceReducer(nextReducer) {
        if (typeof nextReducer !== &#39;function&#39;) {
            throw new Error(&#39;Expected the nextReducer to be a function.&#39;);
        }

        currentReducer = nextReducer; 

        // REPLACE action和INIT action的目的一样，是为了计算默认的state
        dispatch({
            type: ActionTypes.REPLACE
        });
    }

    /**
     * 提供一种机制供类似rx.js这样的observable/reactive库使用
     */
    function observable() {
        var _ref;

        var outerSubscribe = subscribe;
        return _ref = {
            subscribe: function subscribe(observer) {
                if (typeof observer !== &#39;object&#39; || observer === null) {
                    throw new TypeError(&#39;Expected the observer to be an object.&#39;);
                }

                function observeState() {
                    if (observer.next) {
                        observer.next(getState());
                    }
                }

                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                    unsubscribe: unsubscribe
                };
            }
        }, _ref[result] = function () {
            return this;
        }, _ref;
    } 

    // redux内部dispatch一个INIT的action，目的是为了计算应用最初的默认state
    dispatch({
        type: ActionTypes.INIT
    });

    return _ref2 = {
        dispatch: dispatch,
        subscribe: subscribe,
        getState: getState,
        replaceReducer: replaceReducer
    }, _ref2[result] = observable, _ref2;
}
</code></pre>
<h3 id="combinereducers">combineReducers</h3>
<p><code>combineReducers</code>函数用于组合reducer，在大型web应用中，state的结构比较复杂，对应reducer函数也比较庞大，出于提升可维护性的目的，按照业务逻辑对state进行拆分成多个子state，每个子state对应一个子reducer函数，在创建store的时候，先调用<code>combineReducers</code>函数将各个子reducer函数组合成一个总体的reducer函数.</p>
<pre><code class="lang-js">/**
 * combineReducers函数的使用例子
 */
const { combineReducers, createStore } = Redux;

// trivial child reducer
function reducerA(state, action) {
    return &#39;a&#39;;

}

// another trivial child reducer
function reducerB(state, action) {
    return &#39;b&#39;;
}

// attention: 应用state最终也拥有childA和childB两个属性
const rootReducer = combineReducers({
    childA: reducerA,
    childB: reducerB
});

const store = createStore(rootReducers);
</code></pre>
<pre><code class="lang-js">/**
 * 检查各个子reducer函数是否会返回undefined值，前面说了，reducer函数可以返回null，但是不能返回undefined
 */
function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function (key) {
        var reducer = reducers[key];
        // dispatch INIT action
        var initialState = reducer(undefined, {
            type: ActionTypes.INIT
        });

        if (typeof initialState === &#39;undefined&#39;) {
            throw new Error(&quot;Reducer \&quot;&quot; + key + &quot;\&quot; returned undefined during initialization. &quot; + &quot;If the state passed to the reducer is undefined, you must &quot; + &quot;explicitly return the initial state. The initial state may &quot; + &quot;not be undefined. If you don&#39;t want to set a value for this reducer, &quot; + &quot;you can use null instead of undefined.&quot;);
        }

        // dispatch一些其他的action再确认一下reducer的合法性
        if (typeof reducer(undefined, {
            type: ActionTypes.PROBE_UNKNOWN_ACTION()
        }) === &#39;undefined&#39;) {
            throw new Error(&quot;Reducer \&quot;&quot; + key + &quot;\&quot; returned undefined when probed with a random type. &quot; + (&quot;Don&#39;t try to handle &quot; + ActionTypes.INIT + &quot; or other actions in \&quot;redux/*\&quot; &quot;) + &quot;namespace. They are considered private. Instead, you must return the &quot; + &quot;current state for any unknown actions, unless it is undefined, &quot; + &quot;in which case you must return the initial state, regardless of the &quot; + &quot;action type. The initial state may not be undefined, but can be null.&quot;);
        }
    });
}

/**
 * 检查应用当前的state和reducers的对象结构是否一致，如果不一致，控制台给出警告提示
 * @param {Object} inputState 应用当前的state
 * @param {Object} reducers reducers对象
 * @param {action} action 当前被dispatch的action
 * @param {Object} unexpectedKeyCache 应用运行过程中state和reducers之间不一致的key都会缓存在这里
 */
function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action &amp;&amp; action.type === ActionTypes.INIT ? &#39;preloadedState argument passed to createStore&#39; : &#39;previous state received by the reducer&#39;;

    if (reducerKeys.length === 0) {
        return &#39;Store does not have a valid reducer. Make sure the argument passed &#39; + &#39;to combineReducers is an object whose values are reducers.&#39;;
    }

    if (!isPlainObject(inputState)) {
        return &quot;The &quot; + argumentName + &quot; has unexpected type of \&quot;&quot; + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + &quot;\&quot;. Expected argument to be an object with the following &quot; + (&quot;keys: \&quot;&quot; + reducerKeys.join(&#39;&quot;, &quot;&#39;) + &quot;\&quot;&quot;);
    }

    // 正常情况下，应用state中有的属性，reducers对象中也要有
    var unexpectedKeys = Object.keys(inputState).filter(function (key) {
        return !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function (key) {
        unexpectedKeyCache[key] = true;
    });
    if (action &amp;&amp; action.type === ActionTypes.REPLACE) return;

    if (unexpectedKeys.length &gt; 0) {
        return &quot;Unexpected &quot; + (unexpectedKeys.length &gt; 1 ? &#39;keys&#39; : &#39;key&#39;) + &quot; &quot; + (&quot;\&quot;&quot; + unexpectedKeys.join(&#39;&quot;, &quot;&#39;) + &quot;\&quot; found in &quot; + argumentName + &quot;. &quot;) + &quot;Expected to find one of the known reducer keys instead: &quot; + (&quot;\&quot;&quot; + reducerKeys.join(&#39;&quot;, &quot;&#39;) + &quot;\&quot;. Unexpected keys will be ignored.&quot;);
    }
}

/**
 * 组合reducer函数
 * @param {Object} reducers reducers是一个对象，对象的key对应各个子state的key，value为各个子state对应的reducer函数
 * @returns {Function} 最终组合而成的应用reducer函数
 */
function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};

    // 复制reducers对象到闭包变量中
    for (var i = 0; i &lt; reducerKeys.length; i++) {
        var key = reducerKeys[i];

        {
            // 错误检测，剔除无效的子reducer
            if (typeof reducers[key] === &#39;undefined&#39;) {
                warning(&quot;No reducer provided for key \&quot;&quot; + key + &quot;\&quot;&quot;);
            }
        }

        if (typeof reducers[key] === &#39;function&#39;) {
            finalReducers[key] = reducers[key];
        }
    }

    var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don&#39;t warn about the same
    // keys multiple times.

    var unexpectedKeyCache;

    {
        unexpectedKeyCache = {};
    }

    var shapeAssertionError;

    try {
        // 检查各个reducer是否合法
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }

    return function combination(state, action) {
        // state默认是一个空对象
        if (state === void 0) {
            state = {};
        }

        // 存在不合法的reducer，抛出错误
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }

        {
            // 检测state和reducers之间的不一致
            var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

            if (warningMessage) {
                warning(warningMessage);
            }
        }

        // 这个变量指示dispatch后应用state是否确实发生了改变
        var hasChanged = false;
        var nextState = {};

        // 依次执行每个子reducer函数，参数为对应的子state和action，返回值为新的子state
        for (var _i = 0; _i &lt; finalReducerKeys.length; _i++) {
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            // 说了，reducer的返回值不能是undefined
            if (typeof nextStateForKey === &#39;undefined&#39;) {
                var errorMessage = getUndefinedStateErrorMessage(_key, action);
                throw new Error(errorMessage);
            }

            nextState[_key] = nextStateForKey;
            // attention: reducer函数在更新state的过程中，必须要返回一个新的对象，不能直接对参数state做更改后再返回，原因看下面
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }

        // 原因在这里，如果每个reducer都不返回新的对象，那么redux返回的是旧的应用state，最后应用状态未得到更新，此次dispatch操作就默默的失败了，无任何告警提示
        return hasChanged ? nextState : state;
    };
}
</code></pre>
<h3 id="applymiddleware">applyMiddleware</h3>
<p><code>applyMiddleware</code>函数用于给redux添加中间件，所谓redux中间件，本质上是一个函数，用于拦截redux的dispatch函数调用并且添加自定义操作，但是最终依然会调用redux的dispatch方法更新state，例如<code>redux-thunk</code>这个常用的中间件，使得开发者可以dispatch一个函数类型的action.</p>
<pre><code class="lang-js">/**
 * redux-thunk中间件源代码，就是一个简单的函数
 */
function createThunkMiddleware(extraArgument) {
    return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {
        if (typeof action === &#39;function&#39;) {
            return action(dispatch, getState, extraArgument);
        }
        // next就是redux的dispatch函数
        return next(action);
    };
}

const thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

export default thunk;
</code></pre>
<pre><code class="lang-js">/**
 * applyMiddleware函数
 * @param {Function} middleware 需要注意的是，向applyMiddleware函数传递middleware参数的时候，最终调用redux dispatch函数的中间件
 * 要放在参数列表的末尾
 */
function applyMiddleware() {
    // 将所有中间件存入一个数组
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key &lt; _len; _key++) {
        middlewares[_key] = arguments[_key];
    }

    // 返回一个高阶函数，函数参数为redux的createStore函数
    return function (createStore) {
        // 返回一个函数，最终调用此函数创建redux store
        return function () {
            // 先创建redux store
            var store = createStore.apply(void 0, arguments);

            var _dispatch = function dispatch() {
                throw new Error(&#39;Dispatching while constructing your middleware is not allowed. &#39; + &#39;Other middleware would not be applied to this dispatch.&#39;);
            };

            var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch() {
                    return _dispatch.apply(void 0, arguments);
                }
            };

            // 每个中间件本质上都是高阶函数，先把redux的getState函数和一个暂时的dispatch函数传进中间件函数的闭包上下文
            var chain = middlewares.map(function (middleware) {
                return middleware(middlewareAPI);
            });
            /*
             * 调用compose函数创建一个中间件的包装函数（前文有述），然后使用redux的dispatch函数作为参数调用这个包装函数，最后返回重载后的
             * dispatch函数，然后替换store对象上原本的dispatch函数，如此一来，业务代码中每次调用`store.dispatch`的时候，redux内部都会
             * 按照参数传递的顺序一次执行对应中间件的功能，最终再调用redux本身的dispatch函数更改应用state
             */
            _dispatch = compose.apply(void 0, chain)(store.dispatch);
            return _objectSpread2({}, store, {
                dispatch: _dispatch
            });
        };
    };
}
</code></pre>
<h3 id="bindactioncreator">bindActionCreator</h3>
<p><code>bindActionCreator</code>是redux提供的一个包装函数，用于将返回一个<code>action</code>的函数和<code>dispatch</code>组合起来.</p>
<pre><code class="lang-js">/**
 * bindActionCreator函数，将计算action的函数和dispatch进行组合
 * @param {Function} actionCreator 返回值为action的函数
 * @param {Function} dispatch dispatch函数
 * @returns {Function} 开发者执行此函数就直接dispatch了对应的action，不需要每次手动引用redux的dispatch函数
 */
function bindActionCreator(actionCreator, dispatch) {
    return function () {
        return dispatch(actionCreator.apply(this, arguments));
    };
}
</code></pre>
<h3 id="bindactioncreators">bindActionCreators</h3>
<p><code>bindActionCreators</code>基于<code>bindActionCreator</code>进行批量包装.</p>
<pre><code class="lang-js">/**
 * @param {Function|Object} actionCreators 可以返回action的函数集合
 * @param {Function} dispatch dispatch函数
 * @returns {Function|Object}
 */
function bindActionCreators(actionCreators, dispatch) {
    // 参数为单个函数，与bindActionCreator无异
    if (typeof actionCreators === &#39;function&#39;) {
        return bindActionCreator(actionCreators, dispatch);
    }

    // 参数校验
    if (typeof actionCreators !== &#39;object&#39; || actionCreators === null) {
        throw new Error(&quot;bindActionCreators expected an object or a function, instead received &quot; + (actionCreators === null ? &#39;null&#39; : typeof actionCreators) + &quot;. &quot; + &quot;Did you write \&quot;import ActionCreators from\&quot; instead of \&quot;import * as ActionCreators from\&quot;?&quot;);
    }

    var boundActionCreators = {};

    // 逐个函数进行包装
    for (var key in actionCreators) {
        var actionCreator = actionCreators[key];

        if (typeof actionCreator === &#39;function&#39;) {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }

    // 返回最后的包装函数集合
    return boundActionCreators;
}
</code></pre>
]]></description><link>https://zhouzh1.github.io/article/read-source-code-of-redux.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/read-source-code-of-redux.html.html</guid><pubDate>Fri, 20 Dec 2019 05:59:00 GMT</pubDate></item><item><title><![CDATA[HTTP缓存策略]]></title><description><![CDATA[<p>一般来说，对于html, css, js以及图片等静态资源文件，浏览器会进行缓存，这样下次访问这些资源的时候就可以直接从缓存获取，从而提升页面的加载速度，但是浏览器的缓存机制遵循一定的策略.</p>
<h3 id="-">什么情况下会缓存？</h3>
<p>如果希望资源被浏览器缓存到本地，需要满足以下条件：</p>
<ol>
<li><strong>http响应头Content-type必须标明当前资源是可被缓存的静态资源，例如text/html, application/javascript, text/css, image/png等等</strong></li>
<li><strong>http响应头Cache-Control指明了该资源允许被缓存</strong></li>
</ol>
<h3 id="-http-">与缓存有关的HTTP请求头和响应头？</h3>
<p><img src="/site_assets/http-cache-headers.png" alt="http缓存截图"></p>
<ol>
<li><strong>响应头</strong><ol>
<li>Cache-Control: public max-age=3600, public代表资源可以被网络链路上的任何设备缓存，max-age指令代表缓存时长，例如max-age=3600表示浏览器应该缓存这份资源一个小时，Cache-Control请求头可以包含很多指令，详见<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">MDN解释</a></li>
<li>Expires: Sat, 14 Dec 2019 02:07:08 GMT, 代表缓存资源的过期时间，Cache-Control的优先级比Expires高；</li>
<li>Etag: W/&quot;5df19f2c-626bc&quot;, 代表当前资源文件内容的签名；</li>
<li>Last-Modified: Thu, 12 Dec 2019 02:00:12 GMT, 代表当前资源文件最近一次的改动时间</li>
</ol>
</li>
<li><strong>请求头</strong><ol>
<li>If-Modified-Since: Thu, 12 Dec 2019 02:02:19 GMT, 代表当前资源文件最近一次的改动时间，询问服务器当前文件是否已经被更新；</li>
<li>If-None-Match: W/&quot;13a175-16ef7d7b473&quot;, 代表资源文件内容的签名，询问服务器当前文件是否已经被更新；</li>
</ol>
</li>
</ol>
<h3 id="-">什么是强缓存？</h3>
<p>所谓强缓存就是在浏览器的本地缓存里面找到了资源的副本并且副本未过期，不需要再向服务器发出请求，如图：<br><img src="/site_assets/strict-cache.png" alt="local cache"><br>此时浏览器自动给你一个200 OK(from disk cache)的响应</p>
<h3 id="-">什么是协商缓存？</h3>
<p>所谓协商缓存就是在浏览器的本地缓存里面未找找到了副本但是副本已过期，此时浏览器会向服务器发出请求，并且带上对应的If-Modified-Since和If-None-Match请求头，再次和服务器确认缓存是否真正已过期，服务器根据If-Modified-Since或If-None-Match请求头的内容判断文件是否发生了更新，如果是，则说明浏览器缓存确实过期，返回正常的200 OK，响应体为最新的文件内容，反之，服务器返回304 Not Modified，告诉浏览器可以继续使用本地缓存，响应体为空，免去了文件内容的下载时间，如图：<br><img src="/site_assets/condition-cache.png" alt="condition cache">;</p>
<h3 id="-">静态资源总体的加载流程？</h3>
<p>综合以上分析，浏览器在加载静态资源的时候，大概会经历以下流程：</p>
<ol>
<li>检查本地缓存是否有副本，如果没有，直接请求server，流程结束，如果有，检查缓存是否未过期；</li>
<li>server通过Cache-Control的max-age指令指明资源的缓存时长，或者通过Expires的值指明资源的过期时刻，浏览器根据这些信息判断缓存是否还有效，如果有效，直接使用缓存文件，并返回200 OK(from disk cache)，如果已经过期，则进一步发出请求向server确定缓存是否真的已过期；</li>
<li>server在返回资源的时候会带上Etag和Last-Modified这俩响应头，这样浏览器在本地缓存已过期并向server确认的时候，可以带上If-None-Match（对应Etag）和If-Modified-Since（对应Last-Modified）这俩请求头，server会根据这些信息判断资源是否真的已发生更新，如果是，server返回200 OK，http响应体为更新后的资源，如果否，server返回304 Not Modified，http响应体为空，指示浏览器可以继续使用本地的缓存资源.</li>
</ol>
]]></description><link>https://zhouzh1.github.io/article/cache-strategy-of-http-static-resource.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/cache-strategy-of-http-static-resource.html.html</guid><pubDate>Thu, 12 Dec 2019 11:38:00 GMT</pubDate></item><item><title><![CDATA[前端优化路径图]]></title><description><![CDATA[<p>微博上看到的关于前端优化的图<br><img src="/site_assets/frontend-optimize.jpg" alt="前端优化图"></p>
]]></description><link>https://zhouzh1.github.io/article/frontend-optimize-image.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/frontend-optimize-image.html.html</guid><pubDate>Tue, 10 Dec 2019 11:32:00 GMT</pubDate></item><item><title><![CDATA[js中的in操作符和Object.keys方法]]></title><description><![CDATA[<h3 id="in-">in操作符</h3>
<p><code>in</code>和<code>typeof</code>一样，只是操作符，不是函数，它用来判断对象是否拥有某个属性，例如：</p>
<pre><code class="lang-js">console.log(&#39;alert&#39; in window); // true
console.log(&#39;xxoo&#39; in window); // false
</code></pre>
<p>在js中，对象的属性查找和继承是基于原型链来实现的，可以使用<code>hasOwnProperty</code>方法判断一个属性是属于对象本身，还是属于它的上层原型：</p>
<pre><code class="lang-js">console.log(window.hasOwnProperty(&#39;alert&#39;)); // true
console.log(([]).hasOwnProperty(&#39;slice&#39;)); // false
</code></pre>
<p><code>in</code>操作符只负责判断在目标对象的原型链上能否找到目标属性，能找到则返回true，否则返回false：</p>
<pre><code class="lang-js">console.log(&#39;slice&#39; in ([])); // true
</code></pre>
<p>同理，<code>for ... in</code>循环也会遍历到对象原型链上的属性：</p>
<pre><code class="lang-js">function Foo() {
    this.foo = &#39;foo&#39;;
}
Foo.prototype.bar = &#39;bar&#39;;
Foo.prototype.__proto__.ox = &#39;ox&#39;;
const f = new Foo();
for (let key in f) {
    console.log(key); // foo bar ox
}
</code></pre>
<p>但是，像<code>__proto__</code>这样的私有属性是不会被遍历到的：</p>
<pre><code class="lang-js">const foo = {};
console.log(foo.hasOwnProperty(&#39;__proto__&#39;)); // false
</code></pre>
<p>当然，js是一门灵活的语言，当通过<code>JSON.parse</code>方法创建对象的时候，可以使得<code>__proto__</code>作为正常属性被遍历，而不是指向对象原型：</p>
<pre><code class="lang-js">const obj = JSON.parse(&#39;{&quot;a&quot;:&quot;a&quot;,&quot;__proto__&quot;:{&quot;b&quot;:&quot;b&quot;}}&#39;);
for (let key in obj) {
    console.log(key); // a __proto__
}
</code></pre>
<p>使用上面描述的方法可能可以在某些代码中发现原型污染漏洞.</p>
<h3 id="object-keys-">Object.keys方法</h3>
<p>Object.keys方法返回一个字符串数组，数组包含目标对象的所有属性名，<code>(o: object) =&gt; string[]</code>，但是只会包含对象本身的属性，上层原型对象上的属性不会包含在数组内：</p>
<pre><code class="lang-js">function Foo() {
    this.foo = &#39;foo&#39;;
    this.oof = &#39;oof&#39;;
}
Foo.prototype.bar = &#39;bar&#39;;
Foo.prototype.__proto__.ox = &#39;ox&#39;;
const f = new Foo();
console.log(Object.keys(f)); // [&#39;foo&#39;, &#39;oof&#39;]
</code></pre>
]]></description><link>https://zhouzh1.github.io/article/the-in-operator-and-object-keys-function.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/the-in-operator-and-object-keys-function.html.html</guid><pubDate>Tue, 10 Dec 2019 08:42:00 GMT</pubDate></item><item><title><![CDATA[洗牌算法]]></title><description><![CDATA[<p>洗牌算法，用于随机打乱一个有限列表内的元素顺序，目前公认最好的洗牌算法就是Fisher-Yates算法，使用JavaScript实现Fisher-Yates算法对一个数组进行顺序打乱的代码如下.</p>
<pre><code class="lang-js">/**
 * Fisher-Yates算法
 * 将数组元素的顺序原地打乱
 * 时间复杂度O(N)
 * @param {Array&lt;any&gt;} 数组
 */
function shuffle(arr) {
    for (let i = arr.length - 1; i &gt; 0; i--) {
        const idx = Math.floor(Math.random() * (i + 1));
        const tmp = arr[i];
        arr[i] = arr[idx];
        arr[idx] = tmp; 
    }
}
</code></pre>
]]></description><link>https://zhouzh1.github.io/article/shuffle-algorithm.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/shuffle-algorithm.html.html</guid><pubDate>Wed, 30 Oct 2019 10:03:00 GMT</pubDate></item><item><title><![CDATA[React中setState方法的同步与异步]]></title><description><![CDATA[<h3 id="this-setstate-">this.setState方法内部做了什么？</h3>
<p>调用this.setState方法后，先进行状态合并，并会触发状态更新，重新调用组件的render方法，render方法执行结束后会产生新的虚拟dom，最后React内部会对组件的新旧虚拟dom进行diff操作，得到针对旧虚拟dom的patch，最后根据patch来更新dom结构，实现视图更新.</p>
<h3 id="this-setstate-">this.setState的同步和异步，为什么这样处理？</h3>
<p>React的setState方法本质上都是同步操作，所谓异步，指的是将一系列的setState操作先收集起来，最终在函数执行结束时进行状态合并后再进行批量执行.</p>
<p>之所以这样做，是因为如前文所述，每次调用setState方法都会触发视图更新，先将多次setState的调用收集起来，最终根据每次setState调用的状态参数进行状态合并后会得到最终的组件状态，这样一来，虽然调用了多次this.setState，但最终只会调用一次组件的render方法，视图也只会更新一次.</p>
<h3 id="-">同步和异步分别发生在什么时机？</h3>
<p>如前文所述，在函数的执行过程中，如果React想对this.setState进行“异步”操作，必须要能知晓这个函数什么时候会执行结束，在React中，组件生命周期函数的执行完全由React控制，事件处理程序由于合成事件的机制也被React所控制，因此在这两类函数里的this.setState都是“异步”处理，对于setTimeout和setInterval以及Promise回调这一类不在React管控范围内的函数里面，所有的this.setState就只能是同步处理了.</p>
<pre><code class="lang-js">import React from &#39;react&#39;;

class Foo extends React.Component {

    state = {
        a: &#39;a&#39;,
    }

    bar() {
        this.setState({
            a: &#39;A&#39;
        });
        console.log(this.state.a); // &#39;a&#39;
    }

    componentDidMount() {
        setTimeout(() =&gt; {
            this.setState({
                a: &#39;A&#39;
            });
            console.log(this.state.a); // &#39;A&#39;
        }, 0);

        Promise.resolve().then(() =&gt; {
            this.setState({
                a: &#39;A&#39;
            });
            console.log(this.state.a); // &#39;A&#39;
        });

        this.setState({
            a: &#39;A&#39;
        });
        console.log(this.state.a); // &#39;a&#39;
    }

    render() {
        return (
            &lt;div onClick={this.bar}&gt;bar&lt;/div&gt;
        )
    }
}
</code></pre>
]]></description><link>https://zhouzh1.github.io/article/sync-and-async-of-react-setState.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/sync-and-async-of-react-setState.html.html</guid><pubDate>Thu, 24 Oct 2019 09:41:00 GMT</pubDate></item><item><title><![CDATA[script标签的async和defer属性]]></title><description><![CDATA[<p>首先，async和defer属性的作用都是指示浏览器加载外联脚本的具体方式，所以两个属性都必须用在外联脚本的script的标签上，否则无效.</p>
<pre><code class="lang-js">&lt;script src=&quot;./a.js&quot; async&gt;&lt;/script&gt;
&lt;script src=&quot;./b.js&quot; defer&gt;&lt;/script&gt;
</code></pre>
<h3 id="-async-defer">不使用async和defer</h3>
<p>正常情况下，script标签会阻塞浏览器对HTML文档的解析，遇到script标签，浏览器会遵循下列步骤：<br>下载脚本 → 运行脚本 → 继续解析后面的文档内容.</p>
<h3 id="async">async</h3>
<p>async指示浏览器以异步的方式并行下载脚本，脚本下载过程中不会阻塞浏览器对HTML文档的解析，脚本下载完成后立即执行，因此脚本的执行顺序不确定，与script标签在HTML文档的顺序不一定保持一致.</p>
<h3 id="defer">defer</h3>
<p>defer指示浏览器先以并行方式下载脚本，也不会阻塞浏览器，与async不同的是，使用defer属性的脚本下载完成之后不会立即执行，而是在所有的defer脚本下载完成之后，并在DOMContentLoaded事件触发前按照script标签在HTML文档中的顺序执行.</p>
<h3 id="-">总结</h3>
<p>对script标签使用async和defer属性可以减少页面脚本总的下载时间，进而减少页面的白屏时间.</p>
]]></description><link>https://zhouzh1.github.io/article/async-and-defer-attribute-of-script-tag.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/async-and-defer-attribute-of-script-tag.html.html</guid><pubDate>Wed, 23 Oct 2019 10:07:00 GMT</pubDate></item><item><title><![CDATA[js中的对象继承方式以及优劣对比分析]]></title><description><![CDATA[<h3 id="-">原型链继承</h3>
<pre><code class="lang-js">// 父类构造函数
function Parent() {
    this.name = &#39;John&#39;;
    this.habits = [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;];
}
// 父类原型
Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}
// 子类构造函数
function Child() {
    // @empty
}
// 将子类的原型指向父类的一个实例
Child.prototype = new Parent();

const child_1 = new Child();
console.log(child_1.name); // John
console.log(child_2.habits); // [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;]
const child_2 = new Child();
console.log(child_1.habits === child_2.habits); // true
child_1.habits.push(&#39;running&#39;);
console.log(child_1.habits); // [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;, &#39;running&#39;]
</code></pre>
<p><strong>缺点</strong>：父类实例中的引用类型对象由所有的子类实例共享，只要其中一个子类实例对其进行了修改，便会影响其他子类实例，容易“牵一发动全身”，造成容易忽略的BUG.</p>
<h3 id="-">构造函数继承</h3>
<pre><code class="lang-js">function Parent(name) {
    this.name = name;
    this.habits = [&#39;boxing&#39;];
    this.sayHello = function sayHello() {
        console.log(&#39;hello, world!&#39;);
    }
}

function Child() {
    Parent.call(this, &#39;frank&#39;);
}

const child_1 = new Child();
const child_2 = new Child();
child_1.habits.push(&#39;cooking&#39;);
console.log(child_1.habits); // [&#39;boxing&#39;, &#39;cooking&#39;]
console.log(child_2.habits); // [&#39;boxing&#39;]
console.log(child_1.sayHello === child_2.sayHello); // false
</code></pre>
<p><strong>优点</strong>：</p>
<ol>
<li>与原型链的方式相比，解决了不同的子类实例共享原型链上的引用类型对象的问题，因为所有的子类实例都拥有属于自身的属性；</li>
<li>在子类构造函数中调用父类构造函数的同时，可以传递参数，实现不同的子类实例上的属性保存不同的值</li>
</ol>
<p><strong>缺点</strong>：对象方法附加在实例上，每创建一个子类实例，就会将相关的方法也创建一遍，而函数的创建需要占用内存空间</p>
<h3 id="-">原型链-构造函数组合式继承</h3>
<pre><code class="lang-js">function Parent(name) {
    this.name = name;
    this.habits = [&#39;boxing&#39;];
}
Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}

function Child(name) {
    Parent.call(this, name);
}

Child.prototype = new Parent();

const child_1 = new Child(&#39;trump&#39;);
const child_2 = new Child(&#39;willianm&#39;);
console.log(child_1.sayHello === child_2.sayHello); // true
</code></pre>
<p><strong>优点</strong>：结合了原型链和构造函数两种方式的优势，既解决了子类实例共享引用类型属性的问题，又实现了对象方法只需要创建一次即可<br><strong>缺点</strong>：</p>
<ol>
<li>每创建一个子类实例，需要调用两次父类构造函数；</li>
<li>子类实例和子类实例的原型上存在同名属性，造成冗余.</li>
</ol>
<h3 id="-">原型式继承</h3>
<pre><code class="lang-js">function createObj(parentObj) {
    function F() {}
    F.prototype = parentObj;
    return new F();
} 
const parent = {
    habits: [&#39;boxing&#39;]
};
const child = createObj(parent);
</code></pre>
<p>本质上和ES6的<code>Object.create</code>方法一样，只是改变了子类构造函数的原型对象，缺点和基于原型链的继承方式一样.</p>
<h3 id="-">寄生式继承</h3>
<pre><code class="lang-js">function createObj(parentObj) {
    const childObj = Object.create(parentObj);
    childObj.sayHello = function sayHello() {
        console.log(&#39;hello, world&#39;);
    }
}
</code></pre>
<p>和基于构造函数实现继承的方式相比，省略了父类构造函数的调用，但是两种方式缺点一样.</p>
<h3 id="-">寄生-组合式继承</h3>
<pre><code class="lang-js">function Parent() {
    this.firstName = &#39;gates&#39;;
}

Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}

function Child(lastName) {
    Parent.call(this);
    this.lastName = lastName;
}

const prototype = Object.create(Parent.prototype);
Child.prototype = prototype;
prototype.constructor = Child;

// 寄生-组合式方法封装
function inheritance(Child, Parent) {
    const prototype = Object.create(Parent);
    Child.prototype = prototype;
    prototype.constructor = Child;
}
</code></pre>
<p>从名字就可以看出，这种方式集成了寄生和组合方式的优点，绕过了组合方式需要两次调用父类构造函数以及属性冗余的问题.</p>
]]></description><link>https://zhouzh1.github.io/article/js-inheritance.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/js-inheritance.html.html</guid><pubDate>Tue, 08 Oct 2019 10:23:00 GMT</pubDate></item></channel></rss>
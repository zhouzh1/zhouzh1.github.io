<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Daily Notes]]></title><description><![CDATA[Just Some Notes]]></description><link>https://zhouzh1.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 18 Oct 2019 02:59:21 GMT</lastBuildDate><atom:link href="https://zhouzh1.github.io/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 18 Oct 2019 02:59:21 GMT</pubDate><webMaster><![CDATA[zhouzh1]]></webMaster><item><title><![CDATA[js中的对象继承方式以及优劣对比分析]]></title><description><![CDATA[<h3 id="-">原型链继承</h3>
<pre><code class="lang-js">// 父类构造函数
function Parent() {
    this.name = &#39;John&#39;;
    this.habits = [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;];
}
// 父类原型
Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}
// 子类构造函数
function Child() {
    // @empty
}
// 将子类的原型指向父类的一个实例
Child.prototype = new Parent();

const child_1 = new Child();
console.log(child_1.name); // John
console.log(child_2.habits); // [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;]
const child_2 = new Child();
console.log(child_1.habits === child_2.habits); // true
child_1.habits.push(&#39;running&#39;);
console.log(child_1.habits); // [&#39;basketball&#39;, &#39;cook&#39;, &#39;boxing&#39;, &#39;running&#39;]
</code></pre>
<p><strong>缺点</strong>：父类实例中的引用类型对象由所有的子类实例共享，只要其中一个子类实例对其进行了修改，便会影响其他子类实例，容易“牵一发动全身”，造成容易忽略的BUG.</p>
<h3 id="-">构造函数继承</h3>
<pre><code class="lang-js">function Parent(name) {
    this.name = name;
    this.habits = [&#39;boxing&#39;];
    this.sayHello = function sayHello() {
        console.log(&#39;hello, world!&#39;);
    }
}

function Child() {
    Parent.call(this, &#39;frank&#39;);
}

const child_1 = new Child();
const child_2 = new Child();
child_1.habits.push(&#39;cooking&#39;);
console.log(child_1.habits); // [&#39;boxing&#39;, &#39;cooking&#39;]
console.log(child_2.habits); // [&#39;boxing&#39;]
console.log(child_1.sayHello === child_2.sayHello); // false
</code></pre>
<p><strong>优点</strong>：</p>
<ol>
<li>与原型链的方式相比，解决了不同的子类实例共享原型链上的引用类型对象的问题，因为所有的子类实例都拥有属于自身的属性；</li>
<li>在子类构造函数中调用父类构造函数的同时，可以传递参数，实现不同的子类实例上的属性保存不同的值</li>
</ol>
<p><strong>缺点</strong>：对象方法附加在实例上，每创建一个子类实例，就会将相关的方法也创建一遍，而函数的创建需要占用内存空间</p>
<h3 id="-">原型链-构造函数组合式继承</h3>
<pre><code class="lang-js">function Parent(name) {
    this.name = name;
    this.habits = [&#39;boxing&#39;];
}
Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}

function Child(name) {
    Parent.call(this, name);
}

Child.prototype = new Parent();

const child_1 = new Child(&#39;trump&#39;);
const child_2 = new Child(&#39;willianm&#39;);
console.log(child_1.sayHello === child_2.sayHello); // true
</code></pre>
<p><strong>优点</strong>：结合了原型链和构造函数两种方式的优势，既解决了子类实例共享引用类型属性的问题，又实现了对象方法只需要创建一次即可<br><strong>缺点</strong>：</p>
<ol>
<li>每创建一个子类实例，需要调用两次父类构造函数；</li>
<li>子类实例和子类实例的原型上存在同名属性，造成冗余.</li>
</ol>
<h3 id="-">原型式继承</h3>
<pre><code class="lang-js">function createObj(parentObj) {
    function F() {}
    F.prototype = parentObj;
    return new F();
} 
const parent = {
    habits: [&#39;boxing&#39;]
};
const child = createObj(parent);
</code></pre>
<p>本质上和ES6的<code>Object.create</code>方法一样，只是改变了子类构造函数的原型对象，缺点和基于原型链的继承方式一样.</p>
<h3 id="-">寄生式继承</h3>
<pre><code class="lang-js">function createObj(parentObj) {
    const childObj = Object.create(parentObj);
    childObj.sayHello = function sayHello() {
        console.log(&#39;hello, world&#39;);
    }
}
</code></pre>
<p>和基于构造函数实现继承的方式相比，省略了父类构造函数的调用，但是两种方式缺点一样.</p>
<h3 id="-">寄生-组合式继承</h3>
<pre><code class="lang-js">function Parent() {
    this.firstName = &#39;gates&#39;;
}

Parent.prototype.sayHello = function sayHello() {
    console.log(&#39;hello, world&#39;);
}

function Child(lastName) {
    Parent.call(this);
    this.lastName = lastName;
}

const prototype = Object.create(Parent.prototype);
Child.prototype = prototype;
prototype.constructor = Child;

// 寄生-组合式方法封装
function inheritance(Child, Parent) {
    const prototype = Object.create(Parent);
    Child.prototype = prototype;
    prototype.constructor = Child;
}
</code></pre>
<p>从名字就可以看出，这种方式集成了寄生和组合方式的优点，绕过了组合方式需要两次调用父类构造函数以及属性冗余的问题.</p>
]]></description><link>https://zhouzh1.github.io/article/js-inheritance.html.html</link><guid isPermaLink="true">https://zhouzh1.github.io/article/js-inheritance.html.html</guid><pubDate>Tue, 08 Oct 2019 10:23:00 GMT</pubDate></item></channel></rss>